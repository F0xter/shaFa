import math


"""
Template - Compute the area of a triangle (using Heron's formula),
    given its side lengths.
"""
import math
###################################################
# Triangle area (Heron's) formula
# Student should enter function on the next lines.
# Hint:  Use point_distance as a helper function.
def triangle_area(x_0, y_0, x_1, y_1, x_2, y_2):
    a_side = math.sqrt((x_1-x_0)**2+(y_1-y_0)**2)
    b_side = math.sqrt((x_2-x_1)**2+(y_2-y_1)**2)
    c_side = math.sqrt((x_2-x_0)**2+(y_2-y_0)**2)
    s_side = (a_side+b_side+c_side)/2
    area = math.sqrt(s_side*(s_side-a_side)*(s_side-b_side)*(s_side-c_side))
    return area



###################################################
# Tests
# Student should not change this code.

def test(x_0, y_0, x_1, y_1, x_2, y_2):
    """Tests the triangle_area function."""
    
    print("A triangle with vertices (" + str(x_0) + "," + str(y_0) + "),")
    print("(" + str(x_1) + "," + str(y_1) + "), and")
    print("(" + str(x_2) + "," + str(y_2) + ") has an area of")
    print(str(triangle_area(x_0, y_0, x_1, y_1, x_2, y_2)) + ".")

x_0, y_0, x_1, y_1, x_2, y_2 = 0, 0, 3, 4, 1, 1
print("A triangle with vertices (" + str(x_0) + ", " + str(y_0) + "), (" + 
      str(x_1) + "," + str(y_1) + "), and (" + str(x_2) + ", " + str(y_2) + 
      ") has an area of " + str(triangle_area(x_0, y_0, x_1, y_1, x_2, y_2)) + ".")

x_0, y_0, x_1, y_1, x_2, y_2 = -2, 4, 1, 6, 2, 1
print("A triangle with vertices (" + str(x_0) + ", " + str(y_0) + "), (" + 
      str(x_1) + "," + str(y_1) + "), and (" + str(x_2) + ", " + str(y_2) + 
      ") has an area of " + str(triangle_area(x_0, y_0, x_1, y_1, x_2, y_2)) + ".")

x_0, y_0, x_1, y_1, x_2, y_2 = 10, 0, 0, 0, 0, 10
print("A triangle with vertices (" + str(x_0) + ", " + str(y_0) + "), (" + 
      str(x_1) + "," + str(y_1) + "), and (" + str(x_2) + ", " + str(y_2) + 
      ") has an area of " + str(triangle_area(x_0, y_0, x_1, y_1, x_2, y_2)) + ".")


###################################################
# Expected output
# Student should look at the following comments and compare to printed output.

#A triangle with vertices (0,0), (3,4), and (1,1) has an area of 0.5.
#A triangle with vertices (-2,4), (1,6), and (2,1) has an area of 8.5.
#A triangle with vertices (10,0), (0,0), and (0,10) has an area of 50.



def project_to_distance(point_x, point_y, distance):
    dist_to_origin = (point_x ** 2 + point_y ** 2) ** 0.5
    scale = distance / dist_to_origin
    return point_x * scale, point_y * scale

print (project_to_distance(2, 7, 4))


def func(x):
    calc = 67*x**2-(5*x**5)-47
    return calc

print(func(0),func(1), func(2), func(3))

def cube_root(val):
    """
    Given number, return the cube root of the number
    """
    return val ** (1 / 3)

print(cube_root(27.0))


def future_value(present_value, annual_rate, periods_per_year, years):
    """
    Input: the numbers present_value, annual_rate, periods_per_year, years
    Output: future value based on formula given in question
    """
    rate_per_period = annual_rate / periods_per_year
    periods = periods_per_year * years
    value = present_value*(1+rate_per_period)**periods
    return value

    # Put your code here.
    

print("$1000 at 2% compounded daily for 4 years yields $", future_value(1000, .02, 365, 4))


def triang_sq(a):
    area = ((a**2)*math.sqrt(3))/4
    return area

print(triang_sq(5))
